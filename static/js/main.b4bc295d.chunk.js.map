{"version":3,"sources":["components/Container.js","components/Row.js","components/Column.js","components/Card.js","components/Jumbotron.js","components/Image.js","App.js","index.js"],"names":["Container","props","className","fluid","children","Row","helper","Column","base","md","lg","xl","columnClassName","concat","Card","dark","header","Jumbtron","style","fontSize","score","highScore","Image","id","name","image","handleClickOnImage","src","alt","onClick","App","state","choices","clicked","randomize","array","i","length","j","Math","floor","random","resetGame","randomizedChoices","setState","includes","prevState","checkHighScore","handleWin","alert","this","console","log","Jumbotron","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4bc295d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Container = props => {\r\n  return (\r\n    <div className={`container${props.fluid ? '-fluid' : ''}`}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\r\n\r\nconst Row = props => {\r\n  return (\r\n    <div className={props.helper ? `row ${props.helper}` : 'row'}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React from 'react';\r\n\r\nconst Column = ({ base = 12, md, lg, xl, children }) => {\r\n  let columnClassName = `col-${base}`;\r\n\r\n  if (md) {\r\n    columnClassName = columnClassName.concat(` col-md-${md}`);\r\n  }\r\n\r\n  if (lg) {\r\n    columnClassName = columnClassName.concat(` col-lg-${lg}`);\r\n  }\r\n\r\n  if (xl) {\r\n    columnClassName = columnClassName.concat(` col-xl-${xl}`);\r\n  }\r\n\r\n  return <div className={columnClassName}>{children}</div>;\r\n};\r\n\r\nexport default Column;\r\n","import React from 'react';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card mt-2 ${props.dark ? 'bg-dark' : 'bg-light'}`}>\r\n      {props.header && (\r\n        <div\r\n          className={`card-header ${props.dark ? 'text-light' : 'text-dark'}`}>\r\n          {props.header}\r\n        </div>\r\n      )}\r\n      <div className=\"card-body\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nconst Jumbtron = props => {\r\n  return (\r\n    <div\r\n      className={\r\n        props.dark\r\n          ? 'jumbotron bg-dark text-light text-center'\r\n          : 'jumbotron bg-light text-dark text-center'\r\n      }>\r\n      {/* TAKE STYLE OUT JUST TO MAKE A POINT */}\r\n      <span className=\"m-3\" style={{ fontSize: props.score * 20 || 30 }}>\r\n        Score: {props.score}\r\n      </span>\r\n      <span className=\"m-3\" style={{ fontSize: props.highScore * 20 || 30 }}>\r\n        High Score: {props.highScore}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jumbtron;\r\n","import React from 'react';\r\n\r\nconst Image = ({ id, name, image, handleClickOnImage }) => {\r\n  return (\r\n    <img\r\n      src={image}\r\n      alt={name}\r\n      className=\"img-fluid w-100\"\r\n      onClick={() => handleClickOnImage(id)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\nimport Container from './components/Container';\nimport Row from './components/Row';\nimport Column from './components/Column';\nimport Card from './components/Card';\nimport Jumbotron from './components/Jumbotron';\nimport Image from './components/Image';\nimport choices from './choices.json';\n\nclass App extends Component {\n  state = {\n    choices,\n    clicked: [],\n    highScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ choices: this.randomize(this.state.choices) });\n  }\n\n  randomize = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n  };\n\n  // resetGame but not the high score\n\n  resetGame = () => {\n    const randomizedChoices = this.randomize(this.state.choices);\n\n    this.setState({\n      clicked: [],\n      choices: randomizedChoices\n    });\n  };\n\n  // handle click on image function\n\n  handleClickOnImage = id => {\n    // this is loss condition\n    if (this.state.clicked.includes(id)) {\n      this.resetGame();\n    } else {\n      // if they haven't clicked the image yet...\n      // we add the id to clicked array\n      // clicked: [0, 4, 2, 9]\n      // clicked: [0, 4, 2, 9, 3]\n      this.setState(\n        prevState => ({\n          clicked: [...prevState.clicked, id],\n          choices: this.randomize(this.state.choices)\n        }),\n        () => {\n          this.checkHighScore();\n          this.handleWin();\n        }\n      );\n    }\n  };\n\n  // check high score\n\n  checkHighScore = () => {\n    if (this.state.clicked.length > this.state.highScore) {\n      this.setState({ highScore: this.state.clicked.length });\n    }\n  };\n\n  // handle win function\n\n  handleWin = () => {\n    if (this.state.clicked.length === this.state.choices.length) {\n      alert('You won!');\n      this.resetGame();\n    }\n  };\n\n  render() {\n    console.log(this.state);\n    const { clicked, choices, highScore } = this.state;\n    return (\n      <Container>\n        <Jumbotron score={clicked.length} highScore={highScore} dark />\n        <Row helper={`justify-content-center`}>\n          {choices.map(({ id, name, image }) => {\n            return (\n              <Column key={id} md={2}>\n                <Card header={name} dark>\n                  <Image\n                    id={id}\n                    name={name}\n                    image={image}\n                    handleClickOnImage={this.handleClickOnImage}\n                  />\n                </Card>\n              </Column>\n            );\n          })}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}